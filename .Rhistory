savehistory("~/.Rhistory")
library(ggmap)
df <- read.csv("~/Sanjiv.csv") ## directory + csv file with addresses
colnames(df)
#[1] "Location" "Address"  "City"     "State"    "Zip"
head(df)
unique(df$State) ## useful to run on columns like ZIP, State and City; not useful on Address
df$State <- "CA" ## Sanjiv.csv file has funky characters
## add a new column with the full address
df$`lookupAddress` <- paste(df$Address, df$City, df$State, df$Zip, sep = ", ") ## use back ticks around the new column name
print(df)
lookupAddress <- df$`lookupAddress`
## no longer in parallel. Just a function now.
myfun <- function(i){
## print progress
if(i %% 10 == 0){
print("Progress: ")
p <- round(100 * i/length(lookupAddress), 2)
print(paste(p, "% Complete", sep = ""))
}
oneAddress <- lookupAddress[i] ## may need a comma such as, [i,]
if(!is.na(oneAddress)){
print(oneAddress)
result <- ggmap::geocode(location = oneAddress, output = "latlona", override_limit = T)
output <- cbind(oneAddress, result)
return(output)
} else {
## if the Address is NA, then return a row of NAs
output <- data.frame(oneAddress = oneAddress, lon = NA, lat = NA, address = NA)
#output <- cbind(oneAddress, result)
return(output)
}
}
library(foreach)
library(doParallel)
cl <- makeCluster(4)
registerDoParallel(cl)
foreach(i=1:3) %dopar% sqrt(i) ## just a test
## apply the geocode in parallel using 4 cores
parallelResults <- foreach(i = 1:length(lookupAddress)) %dopar% {
myfun(i)
}
parallelResults
result <- ggmap::geocode(location = oneAddress, output = "latlona", messaging = "off", source = "dsk", force = TRUE)
## no longer in parallel. Just a function now.
myfun <- function(i){
## print progress
if(i %% 10 == 0){
print("Progress: ")
p <- round(100 * i/length(lookupAddress), 2)
print(paste(p, "% Complete", sep = ""))
}
oneAddress <- lookupAddress[i] ## may need a comma such as, [i,]
if(!is.na(oneAddress)){
print(oneAddress)
result <- ggmap::geocode(location = oneAddress, output = "latlona", messaging = "off", source = "dsk", force = TRUE)
output <- cbind(oneAddress, result)
return(output)
} else {
## if the Address is NA, then return a row of NAs
output <- data.frame(oneAddress = oneAddress, lon = NA, lat = NA, address = NA)
#output <- cbind(oneAddress, result)
return(output)
}
}
foreach(i=1:3) %dopar% sqrt(i) ## just a test
parallelResults <- foreach(i = 1:length(lookupAddress)) %dopar% {
myfun(i)
}
myfun <- function(i){
## print progress
if(i %% 10 == 0){
print("Progress: ")
p <- round(100 * i/length(lookupAddress), 2)
print(paste(p, "% Complete", sep = ""))
}
oneAddress <- lookupAddress[i] ## may need a comma such as, [i,]
if(!is.na(oneAddress)){
print(oneAddress)
result <- ggmap::geocode(location = oneAddress, output = "latlona", messaging = FALSE, source = "dsk", force = TRUE)
output <- cbind(oneAddress, result)
return(output)
} else {
## if the Address is NA, then return a row of NAs
output <- data.frame(oneAddress = oneAddress, lon = NA, lat = NA, address = NA)
#output <- cbind(oneAddress, result)
return(output)
}
}
parallelResults <- foreach(i = 1:length(lookupAddress)) %dopar% {
myfun(i)
}
parallelOutput = do.call("rbind", parallelResults)
parallelOutput
rm(list=ls())
library(ggmap)
df <- read.csv("~/Sanjiv.csv") ## directory + csv file with addresses
colnames(df)
#For best results, please have the following columns "Location" "Address"  "City"     "State"    "Zip"
head(df)
unique(df$State) ## useful to run on columns like ZIP, State and City; not useful on Address
df$State <- "CA" ## Sanjiv.csv file has funky characters
## add a new column with the full address
df$`lookupAddress` <- paste(df$Address, df$City, df$State, df$Zip, sep = ", ") ## use back ticks around the new column name
print(df)
lookupAddress <- df$`lookupAddress`
lookupAddress <- rbind(df$`lookupAddress`, "", "gibberish")
lookupAddress
df$`lookupAddress` <- paste(df$Address, df$City, df$State, df$Zip, sep = ", ") ## use back ticks around the new column name
lookupAddress <- rbind(df$`lookupAddress`, c("", "gibberish"))
lookupAddress <- rbind(df$`lookupAddress`, "gibberish")
lookupAddress
lookupAddress <- df$`lookupAddress`
lookupAddress
lookupAddress[50] <- "gibberish"
lookupAddress[51] <- ""
lookupAddress
## no longer in parallel. Just a function now.
myfun <- function(i, source = "google"){
## print progress
if(i %% 10 == 0){
print("Progress: ")
p <- round(100 * i/length(lookupAddress), 2)
print(paste(p, "% Complete", sep = ""))
}
oneAddress <- lookupAddress[i] ## may need a comma such as, [i,]
if(!is.na(oneAddress)){
print(oneAddress)
## source = "google" works only if not running in parallel!
## if using in parallel, use source = "dsk"
result <- ggmap::geocode(location = oneAddress, output = "latlona", messaging = FALSE, source = source, force = TRUE)
output <- cbind(oneAddress, result)
return(output)
} else {
## if the Address is NA, then return a row of NAs
output <- data.frame(oneAddress = oneAddress, lon = NA, lat = NA, address = NA)
return(output)
}
}
Results = lapply(X=1:length(lookupAddress), FUN=myfun) ##  if you only want the top 10 records geocoded, change this to X=1:10
output = do.call("rbind", Results)
Results
## no longer in parallel. Just a function now.
myfun <- function(i, source = "google"){
## print progress
if(i %% 10 == 0){
print("Progress: ")
p <- round(100 * i/length(lookupAddress), 2)
print(paste(p, "% Complete", sep = ""))
}
oneAddress <- lookupAddress[i] ## may need a comma such as, [i,]
if(!is.na(oneAddress)){
print(oneAddress)
## source = "google" works only if not running in parallel!
## if using in parallel, use source = "dsk"
result <- ggmap::geocode(location = oneAddress, output = "latlona", messaging = FALSE, source = source, force = TRUE)
output <- cbind(oneAddress, result)
return(output)
} else {
## if the Address is NA, then return a row of NAs
result <- data.frame(lon = NA, lat = NA, address = NA)
output <- cbind(oneAddress, result)
return(output)
}
}
Results = lapply(X=40:length(lookupAddress), FUN=myfun) ##  if you only want the top 10 records geocoded, change this to X=1:10
Results
rm(Results)
Results = lapply(X=40:length(lookupAddress), FUN=myfun) ##  if you only want the top 10 records geocoded, change this to X=1:10
Results
?geocode
dim(Results[[11]])
length(Results[[11]])
## no longer in parallel. Just a function now.
myfun <- function(i, source = "google"){
## print progress
if(i %% 10 == 0){
print("Progress: ")
p <- round(100 * i/length(lookupAddress), 2)
print(paste(p, "% Complete", sep = ""))
}
oneAddress <- lookupAddress[i] ## may need a comma such as, [i,]
if(!is.na(oneAddress)){
print(oneAddress)
## source = "google" works only if not running in parallel!
## if using in parallel, use source = "dsk"
result <- ggmap::geocode(location = oneAddress, output = "latlona", messaging = FALSE, source = source)
output <- cbind(oneAddress, result)
} else {
## if the Address is NA, then return a row of NAs
output <- data.frame(oneAddress = oneAddress, lon = NA, lat = NA, address = NA)
}
if(length(output) != 4){
## if the result of the geocode query doesn't look right, return NA
output <- data.frame(oneAddress = oneAddress, lon = NA, lat = NA, address = NA)
}
return(output)
}
Results = lapply(X=40:length(lookupAddress), FUN=myfun) ##  if you only want the top 10 records geocoded, change this to X=1:10
output = do.call("rbind", Results)
Results
## apply the geocode in parallel using 4 cores
parallelResults <- foreach(i = 1:length(lookupAddress)) %dopar% {
myfun(i, source = "dsk")
}
library(foreach)
library(doParallel)
cl <- makeCluster(4)
registerDoParallel(cl)
foreach(i=1:3) %dopar% sqrt(i) ## just a test
## apply the geocode in parallel using 4 cores
parallelResults <- foreach(i = 1:length(lookupAddress)) %dopar% {
myfun(i, source = "dsk")
}
parallelResults
parallelOutput = do.call("rbind", parallelResults)
print(parallelResults)
print(parallelOutput)
setwd(dir = "~/Desktop/Google Drive/SDSU/DA-Exam-2017/")
list.files(getwd())
# ggplot2 examples
library(readr)
library(dplyr)
options(dplyr.width = Inf)
library(ggplot2)
df <- read_csv(file = "df.csv")
glimpse(df)
## interesting fact: 1995 Mazda RX-7 doesn't have a conventional piston engine; It has two rotational things that act like a 6-cylinder engine.
sum(df$`Number of cylinders` == ".")
df[57, "Number of cylinders"] <- NA
# create factors with value labels
df$`Number of cylinders` <- factor(df$`Number of cylinders`, levels=c("3","4","5","6","8"),
labels=sapply(c("3","4","5","6","8"), function(x) paste(x, "cylinders")))
df$`Manual transmission available` <- factor(df$`Manual transmission available`, levels=c(0, 1),
labels=c("No", "Yes"))
df$`Type` <- as.factor(df$Type)
df$`Air Bags standard` <- factor(df$`Air Bags standard`, levels=c(0, 1, 2),
labels=c("None","Driver only","Driver & passenger"))
df$`Drive train type` <- factor(df$`Drive train type`, levels=c(0, 1, 2),
labels=c("rear wheel drive", "front wheel drive", "all wheel drive"))
df$`Rear seat room` <- as.numeric(df$`Rear seat room`)
df <- read_csv(file = "df.csv")
glimpse(df)
sum(df$`Number of cylinders` == ".")
df[57, "Number of cylinders"] <- NA
df[is.na(df$`Rear seat room`),]
df$`Rear seat room` <- as.numeric(df$`Rear seat room`)
df[is.na(df$`Rear seat room`),]
df <- read_csv(file = "df.csv")
glimpse(df)
## interesting fact: 1995 Mazda RX-7 doesn't have a conventional piston engine; It has two rotational things that act like a 6-cylinder engine.
sum(df$`Number of cylinders` == ".")
df[57, "Number of cylinders"] <- NA
## Chevy Corvette and Mazda RX-7 have NA for Rear seat room; no rear seats
df$`Rear seat room` <- as.numeric(df$`Rear seat room`)
df[is.na(df$`Rear seat room`),]
# create factors with value labels
df$`Number of cylinders` <- factor(df$`Number of cylinders`, levels=c("3","4","5","6","8"),
labels=sapply(c("3","4","5","6","8"), function(x) paste(x, "cylinders")))
df$`Drive train type` <- factor(df$`Drive train type`, levels=c(0, 1, 2),
labels=c("rear wheel drive", "front wheel drive", "all wheel drive"))
df$`Manual transmission available` <- factor(df$`Manual transmission available`, levels=c(0, 1),
labels=c("No", "Yes"))
df$`Type` <- as.factor(df$Type)
df$`Air Bags standard` <- factor(df$`Air Bags standard`, levels=c(0, 1, 2),
labels=c("None","Driver only","Driver & passenger"))
df$Domestic <- factor(df$Domestic, levels = c(0, 1),
labels = c("non-US", "US"))
qplot(Horsepower, `City MPG`, data=df, #shape=am, color=am,
facets=gear~cyl, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon")
qplot(x = Horsepower, y = `City MPG`, data=df, #shape=am, color=am,
facets=gear~cyl, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon")
qplot(x = `Horsepower`, y = `City MPG`, data=df, shape=`Manual transmission available``Manual transmission available``,
facets=gear~cyl, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon")
qplot(x = `Horsepower`, y = `City MPG`, data=df, shape=`Manual transmission available`, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon")
qplot(x = `Horsepower`, y = `City MPG`, data=df, shape=`Manual transmission available`,
color = `Manual transmission available`, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon")
qplot(x = `Horsepower`, y = `City MPG`, data=df, shape=`Manual transmission available`,
color = `Manual transmission available`, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon", main = "Horse Power v City MPG by Transmission Type")
qplot(x = `Horsepower`, y = `City MPG`, data=df, shape=`Manual transmission available`, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon")
qplot(x = `Horsepower`, y = `City MPG`, data=df, shape=`Manual transmission available`,
color = `Manual transmission available`,size=I(3),
xlab="Horsepower", ylab="Miles per Gallon")
qplot(x = `Horsepower`, y = `City MPG`, data=df, shape=`Manual transmission available`,
color = `Manual transmission available`, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon", main = "Horse Power v City MPG by Transmission Type")
qplot(x = `Horsepower`, y = `Highway MPG`, data=df, shape=`Manual transmission available`,
color = `Manual transmission available`, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon", main = "Horse Power v City MPG by Transmission Type")
head(df)
qplot(x = `Horsepower`, y = `Minimum Price`, data=df, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon", main = "Horse Power v City MPG by Transmission Type")
qplot(x = `Horsepower`, y = `Minimum Price`, data=df, shape=`Manual transmission available`,
color = `Manual transmission available`, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon", main = "Horse Power v City MPG by Transmission Type")
qplot(x = `Horsepower`, y = `Midrange Price`, data=df, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon", main = "Horse Power v City MPG by Transmission Type")
qplot(x = `Horsepower`, y = `Midrange Price`, data=df, shape=`Manual transmission available`,
color = `Manual transmission available`, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon", main = "Horse Power v City MPG by Transmission Type")
qplot(x = `Horsepower`, y = `Maximum Price`, data=df, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon", main = "Horse Power v City MPG by Transmission Type")
qplot(x = `Horsepower`, y = `Maximum Price`, data=df, shape=`Manual transmission available`,
color = `Manual transmission available`, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon", main = "Horse Power v City MPG by Transmission Type")
qplot(x = `Engine Size`, y = `Minimum Price`, data=df, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon", main = "Horse Power v City MPG by Transmission Type")
colnames(df)
qplot(x = `Engine size`, y = `Minimum Price`, data=df, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon", main = "Horse Power v City MPG by Transmission Type")
qplot(x = `Engine size`, y = `Minimum Price`, data=df, shape=`Manual transmission available`,
color = `Manual transmission available`, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon", main = "Horse Power v City MPG by Transmission Type")
qplot(x = `Engine size`, y = `Minimum Price`, data=df, shape=`Manual transmission available`,
color = `Manual transmission available`, size=I(3),
xlab="Engine size", ylab="Minimum Price", main = "Engine size v Minimum Price by Transmission Type")
qplot(x = `Engine size`, y = `Minimum Price`, data=df, size=I(3),
xlab="Engine size", ylab="Minimum Price", main = "Engine size v Minimum Price by Transmission Type")
qplot(x = `Engine size`, y = `Midrange Price`, data=df, shape=`Manual transmission available`,
color = `Manual transmission available`, size=I(3),
xlab="Engine size", ylab="Midrange Price", main = "Engine size v Minimum Price by Transmission Type")
qplot(x = `Engine size`, y = `Maximum Price`, data=df, size=I(3),
xlab="Engine size", ylab="Max Price", main = "Engine size v Max Price by Transmission Type")
qplot(x = `Engine Size`, y = `Maximum Price`, data=df, shape=`Manual transmission available`,
color = `Manual transmission available`, size=I(3),
xlab="Engine size", ylab="Max Price", main = "Engine size v Max Price by Transmission Type")
qplot(x = `Engine size`, y = `Maximum Price`, data=df, shape=`Manual transmission available`,
color = `Manual transmission available`, size=I(3),
xlab="Engine size", ylab="Max Price", main = "Engine size v Max Price by Transmission Type")
qplot(x = `Engine size`, y = `Horsepower`, data=df, geom=c("point", "smooth"),
method="lm", formula=y~x, color=`Number of cylinders`,
main="Regression of Engine size on Horsepower",
xlab="Weight", ylab="Miles per Gallon")
qplot(x = `Engine size`, y = `Horsepower`, data=df, geom=c("point", "smooth"),
method="lm", formula=y~x, #color=`Number of cylinders`,
main="Regression of Engine size on Horsepower",
xlab="Weight", ylab="Miles per Gallon")
qplot(x = `Engine size`, y = `Horsepower`, data=df, #geom=c("point", "smooth"),
#method="lm", formula=y~x, #color=`Number of cylinders`,
main="Regression of Engine size on Horsepower",
xlab="Weight", ylab="Miles per Gallon")
qplot(x = `Engine size`, y = `Horsepower`, data=df, size = I(3),
color = `Manual transmission available`,
main="Regression of Engine size on Horsepower",
xlab="Engine size", ylab="Horsepower")
glimpse(df)
qplot(x = `Engine size`, y = `Horsepower`, data=df, size = I(3),
color = `Number of cylinders`, shape = `Number of cylinders`,
main="Regression of Engine size on Horsepower",
xlab="Engine size", ylab="Horsepower")
qplot(x = `Engine size`, y = `Horsepower`, data=df, size = I(3),
color = `Manual transmission available`, shape = `Manual transmission available`,
main="Regression of Engine size on Horsepower",
xlab="Engine size", ylab="Horsepower")
qplot(`Number of cylinders`, `City MPG`, data=df, geom=c("boxplot", "jitter"),
fill=`Number of cylinders`, main="MPG by Number of Cylinders",
xlab="Cylinders", ylab="Miles per Gallon")
qplot(`Number of cylinders`, `City MPG`, data=df, geom="boxplot",
fill=`Number of cylinders`, main="MPG by Number of Cylinders",
xlab="Cylinders", ylab="Miles per Gallon")
qplot(`Number of cylinders`, `City MPG`, data=df, geom="boxplot",
fill=`Number of cylinders`, main="MPG by Number of Cylinders",
xlab="Cylinders", ylab="Miles per Gallon")
qplot(gear, mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill=gear, main="Mileage by Gear Number",
xlab="", ylab="Miles per Gallon")
qplot(as.factor(gear), mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill=gear, main="Mileage by Gear Number",
xlab="", ylab="Miles per Gallon")
qplot(`Number of cylinders`, `City MPG`, data=df, geom="boxplot",
fill=`Number of cylinders`, main="MPG by Number of Cylinders",
xlab="Cylinders", ylab="Miles per Gallon")
fit <- factanal(df, 5, rotation="varimax")
factors <- sapply(df, X = is.factor)
factors <- sapply(df, is.factor)
factors
fit <- factanal(df[, !factors], 5, rotation="varimax")
df[,!factors]
factors <- sapply(df, is.numeric)
factors
df[,!factors]
fit <- factanal(df[, !factors], 5, rotation="varimax")
df[,!factors]
df[, factors]
fit <- factanal(df[, factors], 5, rotation="varimax")
fit <- factanal(rm.na(df[, factors]), 5, rotation="varimax")
fit <- factanal(na.omit(df[, factors]), 5, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
load <- fit$loadings[,1:2]
plot(load,type="n") # set up plot
text(load,labels=names(mydata),cex=.7) # add variable names
text(load,labels=colnames(df),cex=.7) # add variable names
plot(load,type="n") # set up plot
text(load,labels=colnames(df),cex=.7) # add variable names
plot(load) # set up plot
plot(load, type="o") # set up plot
text(load,labels=colnames(df),cex=.7) # add variable names
plot(load, type="p") # set up plot
text(load,labels=colnames(df),cex=.7) # add variable names
# plot factor 1 by factor 2
loads12 <- fit$loadings[,1:2]
loads23 <- fit$loadings[,2:3]
loads34 <- fit$loadings[,3:4]
plot(loads23, type="p") # set up plot
text(loads23,labels=colnames(df),cex=.7) # add variable names
plot(loads34, type="p") # set up plot
text(loads34,labels=colnames(df),cex=.7) # add variable names
fit
fit <- factanal(x = df[, numericdata], factors = 5, na.action = TRUE, rotation="varimax")
numericdata <- sapply(df, is.numeric)
numericdata
df[, numericdata]
fit <- factanal(x = df[, numericdata], factors = 5, na.action = TRUE, rotation="varimax")
fit <- factanal(x = df[, numericdata], factors = 5, na.action = na.omit, rotation="varimax")
fit <- factanal(x = na.omit(df[, numericdata]), factors = 5, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
fit <- factanal(x = na.omit(df[, numericdata]), factors = 4, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
loads12 <- fit$loadings[,1:2]
loads23 <- fit$loadings[,2:3]
loads34 <- fit$loadings[,3:4]
print(fit, digits=2, cutoff=.3, sort=TRUE)
fit <- factanal(x = na.omit(df[, numericdata]), factors = 3, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
loads12 <- fit$loadings[,1:2]
loads23 <- fit$loadings[,2:3]
loads34 <- fit$loadings[,3:4]
loads31 <- fit$loadings[,c(3,1)]
plot(loads31, type="p") # set up plot
plot(loads12, type="p") # set up plot
text(loads12,labels=colnames(df),cex=.7) # add variable names
plot(loads23, type="p") # set up plot
text(loads23,labels=colnames(df),cex=.7) # add variable names
plot(loads31, type="p") # set up plot
text(loads31,labels=colnames(df),cex=.7) # add variable names
text(loads31,labels=colnames(df),cex=.7) # add variable names
fit
qplot(`City MPG`, data=df, geom="density", fill=`Number of cylinders`, alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
qplot(x = `Horsepower`, y = `City MPG`, data=df, shape=`Manual transmission available`,
color = `Manual transmission available`,size=I(3),
xlab="Horsepower", ylab="Miles per Gallon")
max(df)
sapply(df, max)
sapply(df[, numericdata], max)
qplot(x = `Horsepower`, y = `Highway MPG`, data=df, shape=`Manual transmission available`,
color = `Manual transmission available`, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon", main = "Horse Power v City MPG by Transmission Type")
qplot(x = `Horsepower`, y = `Minimum Price`, data=df, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon", main = "Horse Power v City MPG by Transmission Type")
qplot(x = `Horsepower`, y = `Minimum Price`, data=df, shape=`Manual transmission available`,
color = `Manual transmission available`, size=I(3),
xlab="Horsepower", ylab="Miles per Gallon", main = "Horse Power v City MPG by Transmission Type")
?factanal
install.packages("mtclust")
install.packages("mclust")
library(mclust)
Mfit = Mclust(data = df)
Mfit = Mclust(data = na.omit(df))
Mfit = Mclust(data = na.omit(df[, numericdata]))
plot(Mfit)
